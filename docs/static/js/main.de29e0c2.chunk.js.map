{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertapp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","propType","propTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertapp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVM,SAACC,GACbA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAf1B,SAACP,GACfF,EAAcE,EAAEQ,OAAOF,aAmB3BZ,EAAYe,SAAW,CACrBd,cAAee,IAAUC,KAAKC,Y,mCC3BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAe,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAExC,OACE,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAa,MAEdlB,mBAAS,CACjCyB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,YAId,CAACpB,IAEGqB,EDhB2BM,CAAa3B,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,kCAAb,sBAEZ,qBAAKA,UAAU,kDAAf,SAGIH,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEbtBiB,EAAe,WAC1B,IADgC,EAGI9C,mBAFf,CAAC,kBADU,mBAGzB+C,EAHyB,KAGbhD,EAHa,KAUhC,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGgD,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCfxB8B,IAASC,OACH,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.de29e0c2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport propTypes from \"prop-types\";\n\nexport const AddCategory = ({ setcategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const addText = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const sumit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setcategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={sumit}>\n      <input type=\"text\" value={inputValue} onChange={addText} />\n    </form>\n  );\n};\n\nAddCategory.propType = {\n  setcategories: propTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=Ff9ruSjumB7ujwaPt3mwZ79lj4ERthV4`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n      // se agrega el ? para si tiene las images la utilice sino no\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GridGridItem = ({ id, title, url }) => {\n  //console.log({id,title,url})\n  return (\n    <div className=\"card animate__animated animate__fadeInLeft\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GridGridItem } from \"./GridGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n\n      {loading && <p className='animate__animated animate_flash'>Loading </p>}\n\n      <div className=\"card-grid animate__animated animate__fadeInLeft\">\n        {\n          // no se porque images y no setImages\n          images.map((img) => (\n            <GridGridItem key={img.id} {...img} />\n          ))\n        }\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  // cuando mandamos por consola setState a quien estamos mandando al parametro o la funcion\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setTimeout(() => {\n        setState({\n          data: imgs,\n          loading: false,\n        });\n      }, );\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertapp = () => {\n  const initialState = [\"Dragon ball z\"];\n\n  const [categories, setcategories] = useState(initialState);\n\n  /* const add=()=>{\n\n    setcategories(cats => [...cats , inputValue]);\n} */\n\n  return (\n    <div>\n      <h2>GifExpertapp</h2>\n      <AddCategory setcategories={setcategories}></AddCategory>\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertapp } from './GifExpertapp';\nimport './index.css';\n\n\nReactDOM.render(\n      <GifExpertapp />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}